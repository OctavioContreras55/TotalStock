import os
import subprocess
import sys

def menu_principal():
    """Men√∫ principal para seleccionar el tipo de compilaci√≥n"""
    print("=" * 50)
    print("üöÄ SISTEMA DE COMPILACI√ìN TOTALSTOCK")
    print("=" * 50)
    print("1. üîß Compilaci√≥n B√°sica (r√°pida)")
    print("2. ‚ö° Compilaci√≥n Optimizada (recomendada)")
    print("3. üéØ Compilaci√≥n Debug (para desarrollo)")
    print("4. üì¶ Compilaci√≥n Completa (producci√≥n)")
    print("5. üßπ Limpiar archivos temporales")
    print("6. ‚ùå Salir")
    print("=" * 50)
    
    while True:
        try:
            opcion = input("Selecciona una opci√≥n (1-6): ")
            
            if opcion == "1":
                ejecutar_script("scripts/build_basico.py")
                break
            elif opcion == "2":
                ejecutar_script("scripts/build_optimizado.py")
                break
            elif opcion == "3":
                ejecutar_script("scripts/build_debug.py")
                break
            elif opcion == "4":
                ejecutar_script("scripts/build_completo.py")
                break
            elif opcion == "5":
                limpiar_archivos()
                break
            elif opcion == "6":
                print("üëã Saliendo...")
                sys.exit(0)
            else:
                print("‚ùå Opci√≥n no v√°lida. Por favor selecciona 1-6.")
                
        except KeyboardInterrupt:
            print("\nüëã Saliendo...")
            sys.exit(0)

def ejecutar_script(script_path):
    """Ejecutar script de compilaci√≥n espec√≠fico"""
    if not os.path.exists(script_path):
        print(f"‚ùå Error: No se encontr√≥ el script {script_path}")
        return
    
    try:
        print(f"üîÑ Ejecutando {script_path}...")
        subprocess.run([sys.executable, script_path], check=True)
        print("‚úÖ Compilaci√≥n completada exitosamente")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error durante la compilaci√≥n: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

def limpiar_archivos():
    """Limpiar archivos temporales y de compilaci√≥n"""
    print("üßπ Limpiando archivos temporales...")
    
    directorios_limpiar = ["build", "dist", "__pycache__"]
    archivos_limpiar = ["*.pyc", "*.pyo"]
    
    for directorio in directorios_limpiar:
        if os.path.exists(directorio):
            try:
                import shutil
                shutil.rmtree(directorio)
                print(f"‚úÖ Eliminado: {directorio}/")
            except Exception as e:
                print(f"‚ùå Error al eliminar {directorio}: {e}")
    
    print("‚úÖ Limpieza completada")

if __name__ == "__main__":
    menu_principal()
