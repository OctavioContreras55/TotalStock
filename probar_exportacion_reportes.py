#!/usr/bin/env python3
"""
Script de prueba para la nueva funcionalidad de exportaci√≥n de reportes
Verifica que se puedan exportar reportes en PDF, Excel y JSON
"""

import sys
import os
import asyncio
from datetime import datetime

# Agregar el directorio del proyecto al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar funciones necesarias
try:
    from app.funciones.exportar_reportes import (
        exportar_reporte_json, 
        exportar_reporte_excel, 
        exportar_reporte_pdf,
        PDF_AVAILABLE
    )
    print("‚úÖ M√≥dulos importados correctamente")
except ImportError as e:
    print(f"‚ùå Error al importar m√≥dulos: {e}")
    sys.exit(1)

async def probar_exportacion():
    """Prueba la exportaci√≥n en todos los formatos"""
    
    # Datos de prueba para el reporte
    datos_reporte = [
        {
            "id": 1,
            "nombre": "Producto A",
            "categoria": "Electr√≥nicos",
            "stock": 50,
            "precio": 299.99,
            "fecha": "2025-01-15"
        },
        {
            "id": 2,
            "nombre": "Producto B",
            "categoria": "Hogar",
            "stock": 25,
            "precio": 149.50,
            "fecha": "2025-01-16"
        },
        {
            "id": 3,
            "nombre": "Producto C",
            "categoria": "Deportes",
            "stock": 75,
            "precio": 89.99,
            "fecha": "2025-01-17"
        }
    ]
    
    # Metadatos del reporte
    metadata_reporte = {
        "tipo_reporte": "inventario",
        "nombre_reporte": "Reporte de Inventario - Prueba",
        "fecha_generacion": datetime.now().isoformat(),
        "fecha_inicio": "2025-01-01",
        "fecha_fin": "2025-01-31",
        "usuario_filtro": "todos",
        "total_registros": len(datos_reporte)
    }
    
    # Crear directorio de pruebas
    directorio_prueba = "test_exports"
    os.makedirs(directorio_prueba, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    print(f"üìÅ Directorio de prueba: {directorio_prueba}")
    print(f"üïí Timestamp: {timestamp}")
    print(f"üìä Datos de prueba: {len(datos_reporte)} registros")
    
    # Simulador de p√°gina (mock)
    class MockPage:
        def open(self, snackbar):
            print(f"üì± SnackBar: {snackbar.content.value}")
    
    page = MockPage()
    
    # Probar exportaci√≥n JSON
    print("\nüîÑ Probando exportaci√≥n JSON...")
    try:
        await exportar_reporte_json(
            datos_reporte, 
            metadata_reporte, 
            directorio_prueba, 
            timestamp, 
            "inventario", 
            page
        )
        print("‚úÖ Exportaci√≥n JSON exitosa")
    except Exception as e:
        print(f"‚ùå Error en exportaci√≥n JSON: {e}")
    
    # Probar exportaci√≥n Excel
    print("\nüîÑ Probando exportaci√≥n Excel...")
    try:
        await exportar_reporte_excel(
            datos_reporte, 
            metadata_reporte, 
            directorio_prueba, 
            timestamp, 
            "inventario", 
            page
        )
        print("‚úÖ Exportaci√≥n Excel exitosa")
    except Exception as e:
        print(f"‚ùå Error en exportaci√≥n Excel: {e}")
    
    # Probar exportaci√≥n PDF
    print(f"\nüîÑ Probando exportaci√≥n PDF... (PDF disponible: {PDF_AVAILABLE})")
    if PDF_AVAILABLE:
        try:
            await exportar_reporte_pdf(
                datos_reporte, 
                metadata_reporte, 
                directorio_prueba, 
                timestamp, 
                "inventario", 
                page
            )
            print("‚úÖ Exportaci√≥n PDF exitosa")
        except Exception as e:
            print(f"‚ùå Error en exportaci√≥n PDF: {e}")
    else:
        print("‚ö†Ô∏è ReportLab no disponible - PDF omitido")
    
    # Mostrar archivos generados
    print("\nüìÑ Archivos generados:")
    archivos_generados = os.listdir(directorio_prueba)
    for archivo in archivos_generados:
        ruta_completa = os.path.join(directorio_prueba, archivo)
        tama√±o = os.path.getsize(ruta_completa)
        print(f"  üìé {archivo} ({tama√±o} bytes)")
    
    print(f"\nüéâ Prueba completada - {len(archivos_generados)} archivos generados")

def main():
    """Funci√≥n principal"""
    print("üß™ === PRUEBA DE EXPORTACI√ìN DE REPORTES ===")
    print(f"üêç Python: {sys.version}")
    print(f"üìÇ Directorio: {os.getcwd()}")
    
    # Ejecutar prueba
    try:
        asyncio.run(probar_exportacion())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Prueba cancelada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
