#!/usr/bin/env python3
"""
Script de compilaci√≥n debug - Con informaci√≥n de depuraci√≥n
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def build_debug():
    """Crear ejecutable con informaci√≥n de debug para desarrollo"""
    
    print("[DART] TotalStock - Compilaci√≥n Debug")
    print("=" * 50)
    print("üêõ Optimizado para desarrollo y depuraci√≥n...")
    
    # Obtener la ruta correcta del directorio ra√≠z
    script_dir = os.path.dirname(os.path.abspath(__file__))
    root_dir = os.path.dirname(script_dir)
    os.chdir(root_dir)
    
    # Limpiar build anterior
    for carpeta in ["dist", "build"]:
        if os.path.exists(carpeta):
            shutil.rmtree(carpeta)
            print(f"[LIMPIEZA] Limpiando: {carpeta}/")
    
    print("\n[BUSCAR] Creando versi√≥n debug...")
    
    # Comando PyInstaller con informaci√≥n de debug
    comando = [
        sys.executable, "-m", "PyInstaller",
        "--onedir",
        "--console",  # Mostrar consola para debug
        "--name=TotalStock_Debug",
        "--noconfirm",
        "--debug=all",  # Informaci√≥n de debug completa
        
        # Datos necesarios
        "--add-data=conexiones;conexiones",
        "--add-data=assets;assets",
        "--add-data=data;data",
        
        # Importaciones detalladas
        "--hidden-import=flet",
        "--hidden-import=flet.core",
        "--hidden-import=firebase_admin",
        "--hidden-import=firebase_admin.credentials",
        "--hidden-import=firebase_admin.firestore",
        "--hidden-import=polars",
        "--hidden-import=polars",
        "--hidden-import=openpyxl",
        
        # Conservar archivos temporales para debug
        "--log-level=DEBUG",
        
        "run.py"
    ]
    
    # Agregar icono si existe
    if os.path.exists("assets/logo.ico"):
        comando.extend(["--icon", "assets/logo.ico"])
    
    try:
        print("[ESPERA] Construyendo ejecutable debug (puede tomar m√°s tiempo)...")
        resultado = subprocess.run(comando, check=True)
        
        exe_path = Path("dist/TotalStock_Debug/TotalStock_Debug.exe")
        
        if exe_path.exists():
            # Calcular tama√±o
            carpeta_dist = Path("dist/TotalStock_Debug")
            tama√±o_total = sum(f.stat().st_size for f in carpeta_dist.rglob('*') if f.is_file())
            tama√±o_mb = tama√±o_total / (1024 * 1024)
            
            print(f"\n[OK] ¬°Compilaci√≥n debug completada!")
            print(f"[FOLDER] Ubicaci√≥n: {exe_path.absolute()}")
            print(f"[CHART] Tama√±o: {tama√±o_mb:.1f} MB")
            
            print(f"\nüêõ CARACTER√çSTICAS DEBUG:")
            print("   ‚Ä¢ [OK] Consola visible para logs")
            print("   ‚Ä¢ [OK] Informaci√≥n de debug completa")
            print("   ‚Ä¢ [OK] Archivos temporales conservados")
            print("   ‚Ä¢ [OK] Log level: DEBUG")
            
            print(f"\n[LISTA] INSTRUCCIONES DE USO:")
            print("üèÉ‚Äç‚ôÇÔ∏è Para ejecutar:")
            print(f"   cd {carpeta_dist}")
            print("   ./TotalStock_Debug.exe")
            print("\n[IDEA] La consola mostrar√° informaci√≥n detallada de depuraci√≥n")
            
            return True
        else:
            print("[ERROR] Ejecutable no encontrado")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Error en PyInstaller: {e}")
        return False

if __name__ == "__main__":
    success = build_debug()
    
    if success:
        print("\n[SUCCESS] ¬°Compilaci√≥n debug lista!")
        print("üêõ Perfecta para desarrollo y soluci√≥n de problemas")
    else:
        print("\n[ERROR] Hubo problemas en la compilaci√≥n.")
    
    input("\nPresiona Enter para continuar...")
