#!/usr/bin/env python3
"""
TotalStock - Script de compilaci√≥n OPTIMIZADA
Crea ejecutable con configuraci√≥n conservadora para m√°ximo rendimiento
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
import time

def main():
    print("[RAPIDO] TotalStock - Ejecutable OPTIMIZADO (Configuraci√≥n Conservadora)")
    print("=" * 70)
    print("[INICIO] Optimizando para velocidad de inicio...")
    
    # Obtener la ruta correcta del directorio ra√≠z
    script_dir = os.path.dirname(os.path.abspath(__file__))
    root_dir = os.path.dirname(script_dir)
    os.chdir(root_dir)
    
    # Limpiar compilaciones anteriores
    print("\n[LIMPIEZA] Limpiando compilaciones anteriores...")
    for carpeta in ["dist", "build"]:
        if os.path.exists(carpeta):
            shutil.rmtree(carpeta)
            print(f"[OK] Limpiado: {carpeta}/")
    
    print("\n[RAPIDO] Creando versi√≥n ONEDIR (m√°s r√°pida)...")
    print("[ESPERA] Construyendo ejecutable optimizado...")
    
    # Comando PyInstaller optimizado
    comando = [
        sys.executable, "-m", "PyInstaller",
        "--onedir",  # Carpeta en lugar de archivo √∫nico (inicio m√°s r√°pido)
        "--windowed",  # Sin consola
        "--name=TotalStock",
        "--noconfirm",  # No preguntar sobre sobrescribir
        
        # Datos necesarios
        "--add-data=conexiones;conexiones",
        "--add-data=assets;assets",
        "--add-data=data;data",
        
        # Importaciones espec√≠ficas
        "--hidden-import=flet",
        "--hidden-import=flet.core",
        "--hidden-import=firebase_admin",
        "--hidden-import=firebase_admin.credentials",
        "--hidden-import=firebase_admin.firestore",
        "--hidden-import=polars",
        "--hidden-import=polars",
        "--hidden-import=openpyxl",
        
        # Optimizaciones
        "--noupx",  # No comprimir (m√°s r√°pido)
        "--optimize=1",  # Optimizaci√≥n b√°sica
        
        # Archivo principal
        "run.py"
    ]
    
    # Agregar icono si existe
    if os.path.exists("assets/logo.ico"):
        comando.extend(["--icon", "assets/logo.ico"])
    
    try:
        # Ejecutar PyInstaller
        start_time = time.time()
        resultado = subprocess.run(comando, check=True)
        end_time = time.time()
        
        # Verificar resultado
        exe_path = Path("dist/TotalStock/TotalStock.exe")
        
        if exe_path.exists():
            # Calcular estad√≠sticas
            carpeta_dist = Path("dist/TotalStock")
            tama√±o_total = sum(f.stat().st_size for f in carpeta_dist.rglob('*') if f.is_file())
            tama√±o_mb = tama√±o_total / (1024 * 1024)
            tiempo_compilacion = end_time - start_time
            
            # Crear acceso directo
            crear_acceso_directo()
            
            print(f"\n[OK] ¬°Ejecutable OPTIMIZADO creado!")
            print(f"[FOLDER] Ubicaci√≥n: {exe_path.absolute()}")
            print(f"[CHART] Tama√±o: {tama√±o_mb:.1f} MB")
            print(f"‚è±Ô∏è  Tiempo de compilaci√≥n: {tiempo_compilacion:.1f} segundos")
            print("[OK] Acceso r√°pido creado: TotalStock_OPTIMIZADO.bat")
            
            print(f"\n[SUCCESS] ¬°OPTIMIZACI√ìN EXITOSA!")
            print("[RAPIDO] **VENTAJAS de esta versi√≥n:**")
            print("   ‚Ä¢ [INICIO] Inicio 3-5x m√°s r√°pido")
            print("   ‚Ä¢ [PACKAGE] Sin descompresi√≥n en cada uso")
            print("   ‚Ä¢ [RAPIDO] Carga casi inmediata")
            print("   ‚Ä¢ [CONFIG] Configuraci√≥n estable")
            
            mostrar_comparacion()
            mostrar_instrucciones(exe_path)
            
            return True
        else:
            print("[ERROR] Error: No se pudo crear el ejecutable")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Error en PyInstaller: {e}")
        return False
    except Exception as e:
        print(f"[ERROR] Error inesperado: {e}")
        return False

def crear_acceso_directo():
    """Crear archivo BAT para acceso directo"""
    contenido_bat = f'''@echo off
cd /d "{os.getcwd()}"
start "" "dist\\TotalStock\\TotalStock.exe"
'''
    
    with open("TotalStock_OPTIMIZADO.bat", "w", encoding="utf-8") as f:
        f.write(contenido_bat)

def mostrar_comparacion():
    """Mostrar comparaci√≥n de rendimiento"""
    print(f"\n[CHART] COMPARACI√ìN DE RENDIMIENTO:")
    print("=" * 50)
    print("üêå Versi√≥n --onefile (archivo √∫nico):")
    print("   [FOLDER] Tama√±o: ~179 MB (1 archivo)")
    print("   ‚è±Ô∏è  Inicio: 8-15 segundos")
    print("   [PROCESO] Descompresi√≥n: En cada ejecuci√≥n")
    print("   [PACKAGE] Distribuci√≥n: S√∫per f√°cil (1 archivo)")
    print()
    print("[RAPIDO] Versi√≥n --onedir (ESTA - carpeta):")
    print("   [FOLDER] Tama√±o: Similar (~180 MB en carpeta)")
    print("   ‚è±Ô∏è  Inicio: 2-3 segundos")
    print("   [PROCESO] Descompresi√≥n: Solo al crear")
    print("   [PACKAGE] Distribuci√≥n: Carpeta completa")
    print()
    print("[DART] **RECOMENDACI√ìN:**")
    print("   üíª Uso personal/empresa: --onedir (R√ÅPIDO)")
    print("   [UPLOAD] Distribuci√≥n masiva: --onefile (PORT√ÅTIL)")

def mostrar_instrucciones(exe_path):
    """Mostrar instrucciones de uso"""
    carpeta_dist = exe_path.parent
    
    print(f"\n[LISTA] INSTRUCCIONES DE USO:")
    print("=" * 30)
    print("üèÉ‚Äç‚ôÇÔ∏è **OPCI√ìN 1 - Directo:**")
    print(f"   ‚Ä¢ Navega a: {carpeta_dist}")
    print("   ‚Ä¢ Ejecuta: TotalStock.exe")
    print()
    print("[DART] **OPCI√ìN 2 - Acceso r√°pido:**")
    print("   ‚Ä¢ Doble clic en: TotalStock_OPTIMIZADO.bat")
    print()
    print("[FOLDER] **PARA DISTRIBUIR:**")
    print(f"   ‚Ä¢ Comprime la carpeta: {carpeta_dist}")
    print("   ‚Ä¢ Env√≠a el .zip completo")
    print("   ‚Ä¢ El usuario descomprime y ejecuta")
    print()
    print("üéä ¬°EJECUTABLE OPTIMIZADO LISTO!")
    print("[RAPIDO] Ahora tendr√°s inicio s√∫per r√°pido!")

if __name__ == "__main__":
    success = main()
    
    if success:
        print("\n[OK] Compilaci√≥n completada exitosamente")
    else:
        print("\n[ERROR] Hubo problemas en la compilaci√≥n.")
    
    input("\nPresiona Enter para continuar...")
