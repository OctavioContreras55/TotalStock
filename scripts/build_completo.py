#!/usr/bin/env python3
"""
Script de compilaci√≥n completa - Todas las caracter√≠sticas para producci√≥n
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def build_completo():
    """Crear ejecutable completo con todas las caracter√≠sticas para producci√≥n"""
    
    print("üì¶ TotalStock - Compilaci√≥n Completa (Producci√≥n)")
    print("=" * 60)
    print("üöÄ Versi√≥n completa con todas las optimizaciones...")
    
    # Obtener la ruta correcta del directorio ra√≠z
    script_dir = os.path.dirname(os.path.abspath(__file__))
    root_dir = os.path.dirname(script_dir)
    os.chdir(root_dir)
    
    # Limpiar build anterior
    for carpeta in ["dist", "build"]:
        if os.path.exists(carpeta):
            shutil.rmtree(carpeta)
            print(f"üßπ Limpiando: {carpeta}/")
    
    print("\nüîß Creando versi√≥n completa para producci√≥n...")
    
    # Comando PyInstaller completo con todas las caracter√≠sticas
    comando = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",  # Archivo √∫nico para distribuci√≥n
        "--windowed",
        "--name=TotalStock_Produccion",
        "--noconfirm",
        
        # Datos completos
        "--add-data=conexiones;conexiones",
        "--add-data=assets;assets",
        "--add-data=data;data",
        
        # Importaciones completas
        "--hidden-import=flet",
        "--hidden-import=flet.core",
        "--hidden-import=flet.auth",
        "--hidden-import=firebase_admin",
        "--hidden-import=firebase_admin.credentials",
        "--hidden-import=firebase_admin.firestore",
        "--hidden-import=google.cloud.firestore",
        "--hidden-import=polars",
        "--hidden-import=polars",
        "--hidden-import=openpyxl",
        "--hidden-import=PIL",
        "--hidden-import=PIL.Image",
        "--hidden-import=asyncio",
        
        # Recopilar m√≥dulos completos para m√°xima compatibilidad
        "--collect-all=flet",
        "--collect-all=firebase_admin",
        "--collect-all=google.cloud",
        
        # Copiar metadatos
        "--copy-metadata=flet",
        "--copy-metadata=firebase_admin",
        "--copy-metadata=google-cloud-firestore",
        
        # Optimizaciones para producci√≥n
        "--strip",  # Remover s√≠mbolos de debug
        "--optimize=2",  # Optimizaci√≥n m√°xima
        
        "run.py"
    ]
    
    # Agregar icono si existe
    if os.path.exists("assets/logo.ico"):
        comando.extend(["--icon", "assets/logo.ico"])
    
    try:
        print("‚è≥ Construyendo ejecutable completo (puede tomar varios minutos)...")
        print("üí° Esta versi√≥n incluye todas las dependencias y optimizaciones")
        
        resultado = subprocess.run(comando, check=True)
        
        exe_path = Path("dist/TotalStock_Produccion.exe")
        
        if exe_path.exists():
            # Calcular tama√±o
            tama√±o_mb = exe_path.stat().st_size / (1024 * 1024)
            
            print(f"\n‚úÖ ¬°Compilaci√≥n completa exitosa!")
            print(f"üìÅ Ubicaci√≥n: {exe_path.absolute()}")
            print(f"üìä Tama√±o: {tama√±o_mb:.1f} MB")
            
            print(f"\nüöÄ CARACTER√çSTICAS DE PRODUCCI√ìN:")
            print("   ‚Ä¢ ‚úÖ Archivo √∫nico port√°til")
            print("   ‚Ä¢ ‚úÖ Todas las dependencias incluidas")
            print("   ‚Ä¢ ‚úÖ Optimizado para distribuci√≥n")
            print("   ‚Ä¢ ‚úÖ Sin dependencias externas")
            print("   ‚Ä¢ ‚úÖ M√°xima compatibilidad")
            
            print(f"\nüìã INSTRUCCIONES DE DISTRIBUCI√ìN:")
            print("üöÄ Listo para distribuir:")
            print("   1. Copia el archivo TotalStock_Produccion.exe")
            print("   2. Env√≠a o instala en cualquier PC Windows")
            print("   3. Ejecuta directamente - no necesita instalaci√≥n")
            print("   4. Compatible con Windows 7, 8, 10, 11")
            
            # Crear acceso r√°pido
            crear_acceso_produccion(exe_path)
            
            return True
        else:
            print("‚ùå Ejecutable no encontrado")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en PyInstaller: {e}")
        return False

def crear_acceso_produccion(exe_path):
    """Crear acceso r√°pido para la versi√≥n de producci√≥n"""
    try:
        bat_content = f'''@echo off
title TotalStock - Versi√≥n de Producci√≥n
echo üöÄ Iniciando TotalStock (Versi√≥n de Producci√≥n)...
echo üì¶ Ejecutable: {exe_path.absolute()}
echo.
"{exe_path.absolute()}"
'''
        
        with open("TotalStock_PRODUCCION.bat", "w", encoding="utf-8") as f:
            f.write(bat_content)
            
        print("‚úÖ Acceso r√°pido creado: TotalStock_PRODUCCION.bat")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Error creando acceso r√°pido: {e}")

if __name__ == "__main__":
    success = build_completo()
    
    if success:
        print("\nüéä ¬°Compilaci√≥n completa lista!")
        print("üì¶ Perfecta para distribuci√≥n y producci√≥n")
        print("üåü Incluye todas las caracter√≠sticas y optimizaciones")
    else:
        print("\n‚ùå Hubo problemas en la compilaci√≥n.")
    
    input("\nPresiona Enter para continuar...")
