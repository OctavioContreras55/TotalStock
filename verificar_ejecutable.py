#!/usr/bin/env python3
"""
Script de Verificaci√≥n del Ejecutable TotalStock
Verifica que el ejecutable funcione correctamente
"""

import os
import sys
import subprocess
import json
from pathlib import Path
import time

def main():
    print("üîç VERIFICACI√ìN DEL EJECUTABLE TOTALSTOCK")
    print("=" * 60)
    
    # Verificar estructura
    verificar_estructura()
    
    # Verificar informaci√≥n de compilaci√≥n
    verificar_info_compilacion()
    
    # Verificar archivos de acceso
    verificar_archivos_acceso()
    
    # Test b√°sico del ejecutable
    test_ejecutable()
    
    print("\nüéä ¬°VERIFICACI√ìN COMPLETADA!")

def verificar_estructura():
    """Verificar que la estructura del ejecutable sea correcta"""
    print("\nüìÅ Verificando estructura...")
    
    archivos_esperados = [
        "dist/TotalStock/TotalStock.exe",
        "dist/TotalStock/_internal",
        "dist/TotalStock/info_compilacion.json",
        "TotalStock_FUNCIONAL.bat"
    ]
    
    for archivo in archivos_esperados:
        if Path(archivo).exists():
            print(f"‚úÖ {archivo}")
        else:
            print(f"‚ùå FALTA: {archivo}")
    
    # Verificar tama√±o del ejecutable
    exe_path = Path("dist/TotalStock/TotalStock.exe")
    if exe_path.exists():
        tama√±o_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"üìè Tama√±o ejecutable: {tama√±o_mb:.1f} MB")

def verificar_info_compilacion():
    """Verificar informaci√≥n de compilaci√≥n"""
    print("\nüìä Verificando informaci√≥n de compilaci√≥n...")
    
    info_path = Path("dist/TotalStock/info_compilacion.json")
    if info_path.exists():
        try:
            with open(info_path, 'r', encoding='utf-8') as f:
                info = json.load(f)
            
            print(f"üìÖ Fecha: {info['fecha_compilacion']}")
            print(f"üêç Python: {info['version_python']}")
            print(f"üìè Tama√±o: {info['tama√±o_mb']} MB")
            print(f"‚è±Ô∏è Tiempo: {info['tiempo_compilacion_segundos']} segundos")
            print("‚úÖ Informaci√≥n de compilaci√≥n v√°lida")
            
        except Exception as e:
            print(f"‚ùå Error leyendo info: {e}")
    else:
        print("‚ùå Archivo de informaci√≥n no encontrado")

def verificar_archivos_acceso():
    """Verificar archivos de acceso directo"""
    print("\nüîó Verificando archivos de acceso...")
    
    bat_files = [
        "TotalStock_FUNCIONAL.bat",
        "TotalStock_DIRECTO.bat"  # Si existe
    ]
    
    for bat_file in bat_files:
        if Path(bat_file).exists():
            print(f"‚úÖ {bat_file}")
            
            # Verificar contenido
            try:
                with open(bat_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                if "TotalStock.exe" in content:
                    print(f"   üìã Contenido v√°lido")
                else:
                    print(f"   ‚ö†Ô∏è Contenido incompleto")
            except:
                print(f"   ‚ùå Error leyendo archivo")

def test_ejecutable():
    """Test b√°sico del ejecutable"""
    print("\nüß™ Test b√°sico del ejecutable...")
    
    exe_path = Path("dist/TotalStock/TotalStock.exe")
    if not exe_path.exists():
        print("‚ùå Ejecutable no encontrado")
        return
    
    print("‚ö†Ô∏è IMPORTANTE: El test iniciar√° TotalStock")
    print("   - Se abrir√° la aplicaci√≥n") 
    print("   - Ci√©rrala manualmente para continuar")
    print("   - Presiona Enter para continuar o Ctrl+C para cancelar")
    
    try:
        input()
        
        print("üöÄ Iniciando TotalStock...")
        
        # Ejecutar el ejecutable en background
        process = subprocess.Popen(
            [str(exe_path)],
            cwd=exe_path.parent,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        
        print(f"‚úÖ TotalStock iniciado (PID: {process.pid})")
        print("   üëÄ Revisa que se haya abierto la ventana")
        print("   üî¥ Cierra TotalStock para continuar")
        
        # Esperar un poco
        time.sleep(3)
        
        # Verificar si sigue ejecut√°ndose
        if process.poll() is None:
            print("‚úÖ Proceso ejecut√°ndose correctamente")
        else:
            print("‚ö†Ô∏è Proceso termin√≥ r√°pidamente")
            print(f"   C√≥digo de salida: {process.returncode}")
        
    except KeyboardInterrupt:
        print("\n‚ùå Test cancelado por usuario")
    except Exception as e:
        print(f"‚ùå Error en test: {e}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Verificaci√≥n cancelada")
    
    print("\n" + "="*60)
    print("üèÅ Verificaci√≥n terminada")
    input("Presiona Enter para salir...")
